# -*- coding: utf-8 -*-
"""ProyectoIA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15y5HH97SKrRQ53mcHKiLGwldVtfXIGlx

PROYECTO DEL CURSO INTELIGENCIA ARTIFICIAL
"""

#Importamos las librerias que necesitamos
import math
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import sklearn

from sklearn.preprocessing import scale
from sklearn.model_selection import train_test_split 
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

from google.colab import drive
drive.mount('/content/drive')

#Damos permiso para usar archivos de nuestro Drive

df=pd.read_csv('/content/drive/MyDrive/anime.csv')
df.shape
#Cargamos el data set a usar y vemos sus dimensiones

pd.set_option('display.max_columns',35)
#definimos las columnas para mostra por pantalla

df.head() 
#vemos los encabezados antes definidos

df = df.replace('Unknown', float(0))
#hacemos una limpieza de datos reemplazndo string por numero flotante cero para evitar error con el algoritmo

df.head(2)

df=df.drop(['MAL_ID', 'Name', 'Genres', 'English name', 'Japanese name',
       'Type', 'Aired', 'Premiered', 'Producers', 'Licensors',
       'Studios', 'Source', 'Duration', 'Rating', 'Ranked', 'Score-10', 'Score-9', 'Score-8', 'Score-7', 'Score-6',
       'Score-5', 'Score-4', 'Score-3', 'Score-2', 'Score-1'],axis=1)

#filtramos solo las variables a usar

df.head()

#convertir todos los valores a tipo flotante para que el modelo lo pueda procesar
df=df.astype(float)

#ver dimensiones del data set final con el que vamos a trabajar
df.shape

#filtro para las variable score la cual es nuestra variable de respuesta
df = df[df.Score > 0.0]

df.isnull().sum()

#las  siguiente asignamos valores de respuesta Y y las variables pedictoras.
df.columns

Y=df.Score

X=df.drop(['Score'],axis=1)

Y.head(2)

X.head(2)

Y=Y.astype(float)

X=X.astype(float)

Y.shape

X.shape

"""**Algorimo Regresión Ridge**"""

#generamos una lista de 100 valores diferente pora lambda
lambdas= 10**np.linspace(10,2,100)*0.5

lambdas

#dividimos el dataset en conjunto de entrenamiento y prueba
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=1)

from sklearn.linear_model import Ridge, RidgeCV

#definimos nuestro modelo
ridge = Ridge()
coefs = []

for k in lambdas:
    ridge.set_params(alpha=k)
    ridge.fit(X_train, Y_train)
    coefs.append(ridge.coef_)

print(np.shape(coefs))
coefs[0]

lambdas.shape

len(coefs)

#se espera que el coheficiente estima esperado se haga mas pequeño mientras el lambda se haga mas grande
ax = plt.gca()
ax.plot(lambdas, coefs)
ax.set_xscale('log')
plt.axis('tight')
plt.xlabel('lambda')
plt.ylabel('beta')

"""Regresión Ridge con λ=4"""

#score de nuestras variables alpha=4
mod_ridge4 = Ridge(alpha =4)
mod_ridge4.fit(X_train, Y_train)
print(pd.Series(mod_ridge4.coef_ , index=X.columns))

#valor de las variables o categorias selecionada del data set para nuestro entrenamiento
eje_X = range(1,len(mod_ridge4.coef_)+1,1)
plt.scatter(eje_X, mod_ridge4.coef_, color='purple')
plt.title('Betas')
plt.xlabel('indices')
plt.ylabel('Valor de coeficientes')
plt.show()

Y_pred = mod_ridge4.predict(X_test)

#Variable de repuesta o prediciones
plt.scatter(Y_test, Y_pred, color='blue')

#Variable estimada
plt.scatter(Y_test, Y_test, color='blue')

!pip install biopython

!apt-get install -y python3-dev libcairo2-dev
!pip install --no-cache-dir --ignore-installed pycairo

!pip install --no-cache-dir --ignore-installed reportlab

from Bio.Seq import Seq
from Bio.SeqFeature import SeqFeature, FeatureLocation

from Bio.Graphics import GenomeDiagram
from Bio import SeqIO

secuencia = "ATCGATCGATCGATCG"
seq_obj = Seq(secuencia)

gd_diagram = GenomeDiagram.Diagram("My DNA Sequence")
gd_track = gd_diagram.new_track(1, name="Sequence")
gd_feature_set = gd_track.new_set()
gd_feature = gd_feature_set.add_feature(SeqFeature(FeatureLocation(0, len(seq_obj))), color="blue")

gd_diagram.draw(format="linear", orientation="landscape", pagesize='A4', fragments=1,start=0, end=len(seq_obj))
gd_diagram.write("dna_sequence.png", "PNG")

from Bio.Seq import Seq
from Bio.SeqFeature import SeqFeature, FeatureLocation
from Bio.Graphics import GenomeDiagram
from Bio import SeqIO
from PIL import Image

from IPython.display import display

secuencia = "ATCGATCGATCGATCG"
seq_obj = Seq(secuencia)

gd_diagram = GenomeDiagram.Diagram("My DNA Sequence")
gd_track = gd_diagram.new_track(1, name="Sequence")
gd_feature_set = gd_track.new_set()
gd_feature = gd_feature_set.add_feature(SeqFeature(FeatureLocation(0, len(seq_obj))), color="blue")

gd_diagram.draw(format="linear", orientation="landscape", pagesize='A4', fragments=1,start=0, end=len(seq_obj))
gd_diagram.write("dna_sequence.png", "PNG")

img = Image.open("dna_sequence.png")
display(img)

